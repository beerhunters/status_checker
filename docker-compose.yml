services:
  db:
    image: postgres:14-alpine
    container_name: monitoring_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mysecretpassword}
      POSTGRES_DB: ${DB_NAME:-monitoring_bot}
    ports:
      - "5432:5432" # Осторожно! Открывает порт наружу. Уберите в продакшене.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-monitoring_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7-alpine
    container_name: monitoring_redis
    ports:
      - "6379:6379" # Осторожно! Открывает порт наружу. Уберите в продакшене.
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile.bot
    container_name: monitoring_bot_app
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DB_HOST: db # Используем имя сервиса
      REDIS_HOST: redis # Используем имя сервиса
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  celery_worker:
    build:
      context: .
      dockerfile: bot/Dockerfile.bot # Используем тот же Dockerfile, что и для бота
    container_name: monitoring_celery_worker
#    command: ["celery", "-A", "bot.celery_app:celery_app", "worker", "-P", "eventlet", "-c", "20", "--loglevel=INFO"]
    command: celery -A bot.celery_app:celery_app worker --loglevel=info --concurrency=10 --pool=eventlet
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DB_HOST: db
      REDIS_HOST: redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      bot:
        condition: service_started
    restart: always

  celery_beat:
    build:
      context: .
      dockerfile: bot/Dockerfile.bot # Используем тот же Dockerfile
    container_name: monitoring_celery_beat
    # --- ИСПРАВЛЕНА КОМАНДА ---
    # Убран --scheduler, используется стандартный, который берет расписание из celery_app.py
#    command: ["celery", "-A", "bot.celery_app:celery_app", "beat", "--loglevel=INFO"]
    command: celery -A bot.celery_app:celery_app beat --loglevel=info --scheduler celery.beat:PersistentScheduler --pidfile=/tmp/celerybeat.pid
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DB_HOST: db
      REDIS_HOST: redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      bot:
        condition: service_started
    restart: always

  web:
    build:
      context: .
      dockerfile: web/Dockerfile.web
    container_name: monitoring_web_app
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DB_HOST: db
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./web:/app/web
      - ./shared:/app/shared
      - ./bot:/app/bot  # Added to access bot.celery_app
    restart: always

volumes:
  postgres_data: