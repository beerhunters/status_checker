#services:
#  db:
#    image: postgres:14-alpine
#    container_name: monitoring_db
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/
#    environment:
#      POSTGRES_USER: ${DB_USER:-postgres}
#      POSTGRES_PASSWORD: ${DB_PASSWORD:-mysecretpassword}
#      POSTGRES_DB: ${DB_NAME:-monitoring_bot}
#    ports:
#      - "5432:5432"
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-monitoring_bot}"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    restart: always
#    networks:
#      - monitoring-network
#  redis:
#    image: redis:7-alpine
#    container_name: monitoring_redis
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 5s
#      timeout: 3s
#      retries: 5
#    restart: always
#    networks:
#      - monitoring-network
#  bot:
#    build:
#      context: .
#      dockerfile: bot/Dockerfile.bot
#    container_name: monitoring_my
#    env_file:
#      - .env
#    environment:
#      PYTHONPATH: /app
#      LOG_LEVEL: ${LOG_LEVEL:-INFO}
#      DB_HOST: db
#      REDIS_HOST: redis
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    restart: always
#    networks:
#      - monitoring-network
#  celery_worker:
#    build:
#      context: .
#      dockerfile: bot/Dockerfile.bot
#    container_name: monitoring_celery_worker
#    command: sh -c "sleep 15 && redis-cli -h redis ping && celery -A bot.celery_app:celery_app worker --loglevel=info --concurrency=8 --pool=solo"
#    env_file:
#      - .env
#    environment:
#      PYTHONPATH: /app
#      LOG_LEVEL: DEBUG
#      DB_HOST: db
#      REDIS_HOST: redis
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      bot:
#        condition: service_started
#    restart: always
#    networks:
#      - monitoring-network
#  celery_beat:
#    build:
#      context: .
#      dockerfile: bot/Dockerfile.bot
#    container_name: monitoring_celery_beat
#    command: sh -c "sleep 15 && redis-cli -h redis ping && celery -A bot.celery_app:celery_app beat --loglevel=info --scheduler celery.beat:PersistentScheduler --pidfile=/tmp/celerybeat.pid"
#    env_file:
#      - .env
#    environment:
#      PYTHONPATH: /app
#      LOG_LEVEL: DEBUG
#      DB_HOST: db
#      REDIS_HOST: redis
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      bot:
#        condition: service_started
#    restart: always
#    networks:
#      - monitoring-network
#  web:
#    build:
#      context: .
#      dockerfile: web/Dockerfile.web
#    container_name: monitoring_web_app
#    env_file:
#      - .env
#    environment:
#      PYTHONPATH: /app
#      LOG_LEVEL: ${LOG_LEVEL:-INFO}
#      DB_HOST: db
#      REDIS_HOST: redis
#    ports:
#      - "8000:8000"
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    volumes:
#      - ./web:/app/web
#      - ./shared:/app/shared
#    restart: always
#    networks:
#      - monitoring-network
#networks:
#  monitoring-network:
#    driver: bridge
#volumes:
#  postgres_data:
services:
  db:
    image: postgres:14-alpine
    container_name: monitoring_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mysecretpassword}
      POSTGRES_DB: ${DB_NAME:-monitoring_bot}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-monitoring_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - monitoring-network
  redis:
    image: redis:7-alpine
    container_name: monitoring_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: always
    networks:
      - monitoring-network
  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile.bot
    container_name: monitoring_my
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DB_HOST: db
      REDIS_HOST: redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - monitoring-network
  celery_worker:
    build:
      context: .
      dockerfile: bot/Dockerfile.bot
    container_name: monitoring_celery_worker
    command: sh -c "sleep 15 && redis-cli -h redis ping && celery -A bot.celery_app:celery_app worker --loglevel=info --concurrency=8 --pool=solo -E"
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: DEBUG
      DB_HOST: db
      REDIS_HOST: redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      bot:
        condition: service_started
    restart: always
    networks:
      - monitoring-network
  celery_beat:
    build:
      context: .
      dockerfile: bot/Dockerfile.bot
    container_name: monitoring_celery_beat
    command: sh -c "sleep 15 && redis-cli -h redis ping && celery -A bot.celery_app:celery_app beat --loglevel=debug --scheduler celery.beat:PersistentScheduler --schedule=/app/celery_data/celerybeat-schedule --pidfile=/tmp/celerybeat.pid"
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: DEBUG
      DB_HOST: db
      REDIS_HOST: redis
      TZ: UTC
      RUN_CELERY_BEAT: "1"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      bot:
        condition: service_started
    volumes:
      - celerybeat:/app/celery_data
    restart: always
    networks:
      - monitoring-network
  web:
    build:
      context: .
      dockerfile: web/Dockerfile.web
    container_name: monitoring_web_app
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DB_HOST: db
      REDIS_HOST: redis
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./web:/app/web
      - ./shared:/app/shared
    restart: always
    networks:
      - monitoring-network

networks:
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
  celerybeat: