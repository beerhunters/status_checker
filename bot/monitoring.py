import requests
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from celery import shared_task
from shared.db import get_all_sessions_with_users, SessionFactory
from shared.logger_setup import logger


def check_website_sync(url: str, retries: int = 2) -> bool:
    logger.debug(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {url}")
    for attempt in range(retries):
        try:
            headers = {"User-Agent": "WebsiteMonitorBot/1.0 (+https://yourbot.info)"}
            response = requests.get(
                url, headers=headers, timeout=10, allow_redirects=True
            )
            is_available = 200 <= response.status_code < 300
            logger.debug(
                f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {url}, —Å—Ç–∞—Ç—É—Å: {response.status_code}, –¥–æ—Å—Ç—É–ø–µ–Ω: {is_available}"
            )
            return is_available
        except requests.RequestException as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")
        if attempt < retries - 1:
            time.sleep(1)
    logger.debug(f"–°–∞–π—Ç {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False


def update_site_availability_sync(session: Session, site_id: int, url: str) -> bool:
    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–∞–π—Ç–∞ id={site_id}, url={url}")
    try:
        is_available = check_website_sync(url)
        result = session.execute(
            "UPDATE sites SET is_available = :status WHERE id = :site_id RETURNING id",
            {"status": is_available, "site_id": site_id},
        )
        session.commit()
        if result.scalars().first():
            logger.info(
                f"–°–∞–π—Ç {site_id}: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if is_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
            )
            return is_available
        else:
            logger.warning(f"–°–∞–π—Ç {site_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞ {site_id}: {e}", exc_info=True)
        session.rollback()
        return False


@shared_task(bind=True, max_retries=3)
def check_single_site(self, site_id: int, url: str, user_id: int):
    logger.debug(
        f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ check_single_site: site_id={site_id}, url={url}, user_id={user_id}, task_id={self.request.id}"
    )
    with SessionFactory() as session:
        try:
            is_available = update_site_availability_sync(session, site_id, url)
            if not is_available:
                result = session.execute(
                    "SELECT last_notified FROM sites WHERE id = :site_id",
                    {"site_id": site_id},
                )
                last_notified = result.scalars().first()
                now = datetime.utcnow()
                if last_notified is None or now - last_notified > timedelta(minutes=15):
                    logger.warning(f"–°–∞–π—Ç {url} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}) –ù–ï–î–û–°–¢–£–ü–ï–ù!")
                    from bot.bot_main import send_notification_sync

                    try:
                        send_notification_sync(
                            user_id, f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à —Å–∞–π—Ç {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
                        )
                        logger.info(
                            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Å–∞–π—Ç–∞ {url}"
                        )
                        session.execute(
                            "UPDATE sites SET last_notified = :now WHERE id = :site_id",
                            {"now": now, "site_id": site_id},
                        )
                        session.commit()
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–∞–π—Ç–∞ {url}: {e}",
                            exc_info=True,
                        )
                        raise self.retry(countdown=60)
            return is_available
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–π—Ç–∞ {site_id} ({url}): {e}", exc_info=True
            )
            raise self.retry(countdown=60)


@shared_task
def run_monitoring_check():
    logger.debug("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ run_monitoring_check")
    try:
        with SessionFactory() as session:
            sites = get_all_sessions_with_users(session)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(sites)} —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            for site in sites:
                if not site.user:
                    logger.error(
                        f"–°–∞–π—Ç {site.id} ({site.url}) –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º."
                    )
                    continue
                check_single_site.delay(site.id, site.url, site.user.telegram_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ run_monitoring_check: {e}", exc_info=True)
        raise
    logger.debug("–ó–∞–¥–∞—á–∞ run_monitoring_check –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return None
