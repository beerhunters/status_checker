# bot/monitoring.py

import requests
import time
from celery import shared_task
from sqlalchemy.orm import Session
from shared.db import SessionFactory
from shared.logger_setup import logger


def check_website_sync(url: str, retries: int = 2) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–∞: {url}")
    for attempt in range(retries):
        try:
            headers = {"User-Agent": "WebsiteMonitorBot/1.0"}
            response = requests.get(url, headers=headers, timeout=10)
            is_available = 200 <= response.status_code < 300
            logger.info(
                f"{url} ‚Äî {'–¥–æ—Å—Ç—É–ø–µ–Ω' if is_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})"
            )
            return is_available
        except requests.RequestException as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
            if attempt < retries - 1:
                time.sleep(1)
    return False


def update_site_availability_sync(session: Session, site_id: int, url: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞ –≤ –ë–î."""
    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞ ID={site_id}, URL={url}")
    try:
        is_available = check_website_sync(url)

        # –ü—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        result = session.execute(
            "UPDATE sites SET is_available = :status WHERE id = :site_id RETURNING id",
            {"status": is_available, "site_id": site_id},
        )
        session.commit()

        if result.fetchone():
            logger.info(
                f"–°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞ {site_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if is_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
            )
            return is_available
        else:
            logger.warning(f"–°–∞–π—Ç {site_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return False
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞ {site_id}: {e}", exc_info=True
        )
        session.rollback()
        return False


@shared_task(bind=True, max_retries=3)
def check_single_site(self, site_id: int, url: str, user_id: int):
    """–ó–∞–¥–∞—á–∞ Celery –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç–∞."""
    logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ Celery –¥–ª—è —Å–∞–π—Ç–∞ {site_id}")
    with SessionFactory() as session:
        try:
            is_available = update_site_availability_sync(session, site_id, url)

            if not is_available:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
                last_notified_row = session.execute(
                    "SELECT last_notified FROM sites WHERE id = :site_id",
                    {"site_id": site_id},
                ).fetchone()

                last_notified = last_notified_row[0] if last_notified_row else None
                now = datetime.utcnow()

                if (
                    last_notified is None or (now - last_notified).total_seconds() > 900
                ):  # 15 –º–∏–Ω—É—Ç
                    from bot.bot_main import send_notification_sync

                    try:
                        send_notification_sync(
                            user_id, f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à —Å–∞–π—Ç {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"
                        )
                        logger.info(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
                        )

                        session.execute(
                            "UPDATE sites SET last_notified = :now WHERE id = :site_id",
                            {"now": now, "site_id": site_id},
                        )
                        session.commit()
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–∞–π—Ç–∞ {url}: {e}"
                        )
                        raise self.retry(countdown=60)
            return is_available
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–π—Ç–∞ {site_id}: {e}", exc_info=True)
            raise self.retry(countdown=60)


@shared_task
def run_monitoring_check():
    """–ó–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤."""
    logger.debug("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ run_monitoring_check")
    with SessionFactory() as session:
        try:
            result = session.execute("SELECT id, url, user_id FROM sites")
            sites = result.fetchall()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sites)} —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

            for site in sites:
                site_id, url, user_id = site
                check_single_site.delay(site_id, url, user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: {e}", exc_info=True)
