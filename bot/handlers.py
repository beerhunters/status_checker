# # bot/handlers.py
# from aiogram import Router, F
# from aiogram.filters import CommandStart
# from aiogram.types import Message, CallbackQuery, ErrorEvent
# from aiogram.fsm.context import FSMContext
# from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
# from aiogram.handlers import ErrorHandler
# from shared.db import (
#     get_or_create_user,
#     get_user_sites,
#     delete_site_by_id,
#     AsyncSessionFactory,
# )
# from shared.models import User, Site
# from sqlalchemy.future import select
# from shared.logger_setup import logger
# from bot.fsm import AddSite
# from bot.keyboards import get_main_menu_keyboard, get_sites_keyboard, get_back_keyboard
# from shared.monitoring import update_site_availability
# from datetime import datetime
# import traceback
# from typing import Optional
#
# router = Router()
#
#
# # –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
# class ErrorInfo:
#     def __init__(self, exception: Exception, update: Optional[ErrorEvent] = None):
#         self.exception = exception
#         self.exception_name = type(exception).__name__
#         self.exception_message = str(exception)
#         self.error_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#         self.update = update
#         self.traceback_info = traceback.format_exc()
#         self.traceback_snippet = self._format_traceback()
#         self.error_location = self._get_error_location()
#
#     def _get_error_location(self) -> str:
#         if not hasattr(self.exception, "__traceback__"):
#             return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
#         tb = traceback.extract_tb(self.exception.__traceback__)
#         if not tb:
#             return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
#         last_call = tb[-1]
#         filename = last_call.filename
#         line = last_call.lineno
#         func = last_call.name
#         code_line = last_call.line.strip() if last_call.line else "???"
#         return (
#             f"üìÇ <b>–§–∞–π–ª:</b> {filename}\n"
#             f"üìå <b>–°—Ç—Ä–æ–∫–∞:</b> {line}\n"
#             f"üîπ <b>–§—É–Ω–∫—Ü–∏—è:</b> {func}\n"
#             f"üñ• <b>–ö–æ–¥:</b> <pre>{code_line}</pre>"
#         )
#
#     def _format_traceback(self, max_length: int = 2000) -> str:
#         tb_lines = self.traceback_info.splitlines()
#         snippet = (
#             "\n".join(tb_lines[-4:]) if len(tb_lines) >= 4 else self.traceback_info
#         )
#         if len(snippet) > max_length:
#             return snippet[:max_length] + "\n...[—Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
#         return snippet
#
#     def get_user_info(self) -> tuple[Optional[int], Optional[str], Optional[str]]:
#         if not self.update:
#             return None, None, None
#         update = self.update.update
#         if update.message:
#             return (
#                 update.message.from_user.id,
#                 update.message.from_user.full_name,
#                 update.message.text,
#             )
#         elif update.callback_query:
#             return (
#                 update.callback_query.from_user.id,
#                 update.callback_query.from_user.full_name,
#                 update.callback_query.data,
#             )
#         return None, None, None
#
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
# @router.errors()
# class MyErrorHandler(ErrorHandler):
#     async def handle(self) -> None:
#         logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤—ã–∑–≤–∞–Ω")
#         exception = getattr(self.event, "exception", None)
#         update = getattr(self.event, "update", None)
#
#         if not exception:
#             logger.error("–°–æ–±—ã—Ç–∏–µ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: %s", self.event)
#             return
#
#         error_info = ErrorInfo(exception, self.event)
#
#         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
#         logger.error(
#             "–û—à–∏–±–∫–∞ %s: %s\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: %s\nTraceback: %s",
#             error_info.exception_name,
#             error_info.exception_message,
#             error_info.error_location.replace("\n", " | "),
#             error_info.traceback_snippet,
#         )
#
#         # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         await self._notify_user(error_info)
#
#         # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
#         await self._notify_admins(error_info)
#
#     async def _notify_user(self, error_info: ErrorInfo) -> None:
#         update = error_info.update.update if error_info.update else None
#         if not update:
#             logger.warning("–ù–µ—Ç update –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
#             return
#
#         user_message = (
#             "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. üò•\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#         )
#         try:
#             if update.message:
#                 await update.message.answer(
#                     user_message, reply_markup=get_main_menu_keyboard()
#                 )
#                 logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Message)")
#             elif update.callback_query and update.callback_query.message:
#                 await update.callback_query.message.answer(
#                     user_message, reply_markup=get_main_menu_keyboard()
#                 )
#                 logger.info(
#                     "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (CallbackQuery)"
#                 )
#             else:
#                 logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: %s", type(update))
#         except Exception as e:
#             logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", str(e))
#
#     async def _notify_admins(self, error_info: ErrorInfo) -> None:
#         from shared.config import settings
#
#         user_id, user_name, user_message = error_info.get_user_info()
#
#         admin_message = (
#             f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
#             f"‚è∞ <b>–í—Ä–µ–º—è:</b> {error_info.error_time}\n\n"
#             f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
#             f"üÜî <b>ID:</b> {user_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
#             f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {user_message or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
#             f"‚ùå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_info.exception_name}\n"
#             f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_info.exception_message}\n\n"
#             f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n{error_info.error_location}\n\n"
#             f"üìö <b>–¢—Ä–µ–π—Å–±–µ–∫:</b>\n<pre>{error_info.traceback_snippet}</pre>"
#         )
#
#         try:
#             await self.bot.send_message(
#                 settings.admin_chat_id,  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ ADMIN_CHAT_ID –≤ settings
#                 admin_message,
#                 parse_mode="HTML",
#             )
#             logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
#         except Exception as e:
#             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: %s", str(e))
#
#
# # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# async def handle_db_error(message_or_callback, operation: str):
#     user_id = message_or_callback.from_user.id
#     logger.error(f"Database error during {operation} for user {user_id}")
#     text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#     if isinstance(message_or_callback, Message):
#         await message_or_callback.answer(text, reply_markup=get_main_menu_keyboard())
#     elif isinstance(message_or_callback, CallbackQuery):
#         await message_or_callback.message.answer(
#             text, reply_markup=get_main_menu_keyboard()
#         )
#         await message_or_callback.answer("–û—à–∏–±–∫–∞ –ë–î", show_alert=True)
#
#
# @router.message(CommandStart())
# async def command_start_handler(message: Message) -> None:
#     try:
#         await get_or_create_user(message.from_user.id, message.from_user.username)
#         await message.answer(
#             f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
#             "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤. "
#             "–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞—à–∏ —Å–∞–π—Ç—ã –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ —Å–æ–æ–±—â–∞—Ç—å, "
#             "–µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –Ω–∏—Ö —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
#             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
#             reply_markup=get_main_menu_keyboard(),
#         )
#     except Exception as e:
#         logger.error(
#             f"Error in start command for {message.from_user.id}: {e}", exc_info=True
#         )
#         await handle_db_error(message, "start command")
#
#
# # @router.message(CommandStart())
# # async def command_start_handler(message: Message) -> None:
# #     raise Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ command_start_handler")
#
#
# @router.callback_query(F.data == "to_start")
# async def to_start_callback(callback: CallbackQuery):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í –Ω–∞—á–∞–ª–æ'."""
#     try:
#         await get_or_create_user(callback.from_user.id, callback.from_user.username)
#         text = (
#             f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}! üëã\n\n"
#             "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
#         )
#         try:
#             await callback.message.edit_text(
#                 text,
#                 reply_markup=get_main_menu_keyboard(),
#             )
#         except TelegramBadRequest:
#             # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
#             await callback.message.answer(text, reply_markup=get_main_menu_keyboard())
#             await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#
#     except Exception as e:
#         logger.error(
#             f"Error in to_start for user {callback.from_user.id}: {e}", exc_info=True
#         )
#         await callback.message.answer(
#             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard()
#         )
#     finally:
#         await callback.answer()
#
#
# @router.callback_query(F.data == "add_site")
# async def add_site_callback(callback: CallbackQuery, state: FSMContext):
#     """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞."""
#     await callback.message.edit_text(
#         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å "
#         "(–Ω–∞–ø—Ä–∏–º–µ—Ä, https://google.com):",
#         reply_markup=get_back_keyboard(),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æ"
#     )
#     await state.set_state(AddSite.waiting_for_url)
#     await callback.answer()
#
#
# @router.message(AddSite.waiting_for_url)
# async def process_url(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π URL, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç."""
#     url = message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
#     await state.clear()
#
#     # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
#     if not (url.startswith("http://") or url.startswith("https://")):
#         await message.answer(
#             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL, "
#             "–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://.",
#             reply_markup=get_main_menu_keyboard(),
#         )
#         return
#
#     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è)
#     if "." not in url[url.find("://") + 3 :]:
#         await message.answer(
#             "–ü–æ—Ö–æ–∂–µ, –≤ URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.",
#             reply_markup=get_main_menu_keyboard(),
#         )
#         return
#
#     try:
#         async with AsyncSessionFactory() as session:
#             # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             user_stmt = select(User).filter(User.telegram_id == message.from_user.id)
#             result = await session.execute(user_stmt)
#             user = result.scalars().first()
#             if not user:  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è /start –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å–æ–∑–¥–∞—Ç—å
#                 user = await get_or_create_user(
#                     message.from_user.id, message.from_user.username
#                 )
#
#             # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∞–π—Ç —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             site_stmt = select(Site).filter(Site.user_id == user.id, Site.url == url)
#             result = await session.execute(site_stmt)
#             existing_site = result.scalars().first()
#
#             if existing_site:
#                 await message.answer(
#                     f"–°–∞–π—Ç {url} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.",
#                     reply_markup=get_main_menu_keyboard(),
#                 )
#                 return
#
#             # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∞–π—Ç
#             new_site = Site(url=url, user_id=user.id)
#             session.add(new_site)
#             await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞
#             site_id = new_site.id
#
#             # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
#             is_available = await update_site_availability(session, site_id, url)
#             status_text = "–¥–æ—Å—Ç—É–ø–µ–Ω" if is_available else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
#
#             # 5. –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
#             await session.commit()
#
#             await message.answer(
#                 f"–°–∞–π—Ç {url} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}.",
#                 reply_markup=get_main_menu_keyboard(),
#             )
#
#     except Exception as e:
#         logger.error(
#             f"Error adding site {url} for {message.from_user.id}: {e}", exc_info=True
#         )
#         await handle_db_error(message, "adding site")
#
#
# @router.callback_query(F.data == "list_sites")
# async def list_sites_callback(callback: CallbackQuery):
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
#     try:
#         sites = await get_user_sites(callback.from_user.id)
#         keyboard = get_sites_keyboard(sites)
#         text = (
#             "–í–∞—à–∏ —Å–∞–π—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"
#             if sites
#             else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
#         )
#
#         try:
#             await callback.message.edit_text(text, reply_markup=keyboard)
#         except TelegramBadRequest as e:
#             logger.warning(f"Failed to edit message for list_sites (no change?): {e}")
#             # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
#             await callback.answer()
#
#     except Exception as e:
#         logger.error(
#             f"Error listing sites for {callback.from_user.id}: {e}", exc_info=True
#         )
#         await handle_db_error(callback, "listing sites")
#     finally:
#         # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å '—á–∞—Å–∏–∫–∏'
#         await callback.answer()
#
#
# @router.callback_query(F.data.startswith("delete_site_"))
# async def delete_site_callback(callback: CallbackQuery):
#     """–£–¥–∞–ª—è–µ—Ç —Å–∞–π—Ç –ø–æ ID."""
#     try:
#         site_id_str = callback.data.split("_")[2]
#         site_id = int(site_id_str)
#     except (IndexError, ValueError):
#         logger.error(f"Invalid callback data received: {callback.data}")
#         await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
#         return
#
#     try:
#         success = await delete_site_by_id(site_id, callback.from_user.id)
#         if success:
#             await callback.answer("–°–∞–π—Ç —É–¥–∞–ª–µ–Ω.", show_alert=False)
#             # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
#             sites = await get_user_sites(callback.from_user.id)
#             keyboard = get_sites_keyboard(sites)
#             text = (
#                 "–í–∞—à–∏ —Å–∞–π—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"
#                 if sites
#                 else "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
#             )
#             await callback.message.edit_text(text, reply_markup=keyboard)
#         else:
#             await callback.answer(
#                 "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω).", show_alert=True
#             )
#
#     except TelegramBadRequest as e:
#         logger.warning(f"Failed to edit message after delete (maybe no change?): {e}")
#         await callback.answer("–°–∞–π—Ç —É–¥–∞–ª–µ–Ω.")  # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
#     except Exception as e:
#         logger.error(
#             f"Error deleting site {site_id} for {callback.from_user.id}: {e}",
#             exc_info=True,
#         )
#         await callback.answer(
#             "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True
#         )
#         await handle_db_error(callback, "deleting site")
# –ò–∑–º–µ–Ω–µ–Ω–∏—è: –£–±—Ä–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ Celery, –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –∏–∑ shared/
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from bot.fsm import AddSite
from bot.keyboards import get_main_menu_keyboard, get_sites_keyboard, get_back_keyboard
from shared.db import (
    get_or_create_user,
    add_site_to_user,
    get_user_sites,
    delete_site_by_id,
    AsyncSessionFactory,
)
from shared.models import User, Site
from shared.utils import send_notification_async
import traceback
import logging
from typing import Optional

router = Router()
logger = logging.getLogger("WebsiteMonitorBot")


class ErrorInfo:
    def __init__(self, exception: Exception, update: Optional[object] = None):
        self.exception = exception
        self.update = update
        self.traceback_info = traceback.format_exc()

    def _get_error_location(self) -> str:
        tb = traceback.extract_tb(self.exception.__traceback__)
        last_call = tb[-1]
        filename = last_call.filename
        line = last_call.lineno
        func = last_call.name
        code_line = last_call.line.strip() if last_call.line else "???"
        return f"{filename}:{line} ({func}): {code_line}"

    def _format_traceback(self, max_length: int = 2000) -> str:
        tb_lines = self.traceback_info.splitlines()
        snippet = "\n".join(tb_lines[-10:])
        return snippet[:max_length]

    def get_user_info(self) -> tuple[Optional[int], Optional[str], Optional[str]]:
        if not self.update:
            return None, None, None
        update = self.update.update
        user_id = (
            getattr(update, "from_user", None).id
            if hasattr(update, "from_user")
            else None
        )
        username = (
            getattr(update, "from_user", None).username
            if hasattr(update, "from_user")
            else None
        )
        return user_id, username, None


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞–º–∏.",
        reply_markup=get_main_menu_keyboard(),
    )


@router.callback_query(F.data == "to_start")
async def to_start_callback(callback: CallbackQuery):
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await callback.message.edit_text(text, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data == "add_site")
async def add_site_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=get_back_keyboard()
    )
    await state.set_state(AddSite.waiting_for_url)


@router.message(AddSite.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    url = message.text.strip().lower()
    async with AsyncSessionFactory() as session:
        try:
            user = await get_or_create_user(
                message.from_user.id, message.from_user.username
            )
            site = await add_site_to_user(message.from_user.id, url)
            if site:
                status_text = "–¥–æ—Å—Ç—É–ø–µ–Ω" if site.is_available else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                await message.answer(
                    f"–°–∞–π—Ç {url} –¥–æ–±–∞–≤–ª–µ–Ω! –°—Ç–∞—Ç—É—Å: {status_text}",
                    reply_markup=get_main_menu_keyboard(),
                )
            else:
                await message.answer(
                    "–°–∞–π—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                    reply_markup=get_main_menu_keyboard(),
                )
        except Exception as e:
            logger.error(f"Error adding site: {str(e)}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞.",
                reply_markup=get_main_menu_keyboard(),
            )
        await state.clear()


@router.callback_query(F.data == "list_sites")
async def list_sites_callback(callback: CallbackQuery):
    sites = await get_user_sites(callback.from_user.id)
    if sites:
        keyboard = get_sites_keyboard(sites)
        await callback.message.edit_text("–í–∞—à–∏ —Å–∞–π—Ç—ã:", reply_markup=keyboard)
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.", reply_markup=get_main_menu_keyboard()
        )


@router.callback_query(F.data.startswith("delete_site_"))
async def delete_site_callback(callback: CallbackQuery):
    site_id = int(callback.data.split("_")[2])
    success = await delete_site_by_id(site_id, callback.from_user.id)
    if success:
        await callback.message.edit_text(
            "–°–∞–π—Ç —É–¥–∞–ª–µ–Ω!", reply_markup=get_main_menu_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞.", reply_markup=get_main_menu_keyboard()
        )
